1. 상속을 UML로 표기해 보세요.

부모 클래스   <------------------   자식 클래스

2. 부모 클래스와 자식 클래스의 다른 용어들은?

부모 클래스 : super클래스, 상위클래스
자식 클래스 : sub클래스, 하위클래스


3. super 키워드와 this 키워드의 차이는 무엇인가요?

super : 이미 클래스 내에 동일한 이름의 메소드, 변수가 있어도 super. 을 붙여 상속받은 클래스의 메소드, 변수를 사용 할 수 있다.
this : 클래스 영역에서 정의한 변수와 동일한 이름의 변수가 사용되는 경우, this. 를 붙여 클래스 영역에 정의한변수를 사용할 수 있다.


4. 단일 상속과 다중 상속 이란?

단일 상속 : 자식 클래스 또는 하위 클래스가 하나의 부모 또는 상위 클래스에서만 상속하면 단일 상속 이다.
다중 상속 : 다중 상속은 클래스가 둘 이상의 부모로부터 속성과 동작을 상속 할 수 있는 것이다. 


5. 다음 코드와 같이 과목과 점수가 짝을 이루도록 2개의 배열을 작성하라.


String course[] = {"Java", "C++", "HTML5", "컴퓨터구조", "안드로이드"};
int score[]  = {95, 88, 76, 62, 55};

/*
그리고 다음 예시와 같이 과목 이름을 입력받아 점수를 출력하는 프로그램을 작성하라. "그만"을 입력받으면 종료한다. (Java는 인덱스 0에 있으므로 score[0]을 출력)

과목 이름 >> Jaba
없는 과목입니다.
과목 이름 >> Java
Java의 점수는 95
과목 이름 >> 안드로이드
안드로이드의 점수는 55
과목 이름 >> 그만
*/

[Hint] 문자열을 비교하기 위해서는 String 클래스의 equals()메소드를 이용해야 한다.

String name;
	if(course[i].equals(name)) {
	int n = score[i];
	...
}

class Test01 {
	public static void main(String[] args) {
		String course[] = {"Java", "C++", "HTML5", "컴퓨터구조", "안드로이드"};
		int score[]  = {95, 88, 76, 62, 55};
		Subject[] sb = new Subject[5];
		String subject;
		Scanner sc = new Scanner(System.in);
		
		for(int i=0; i<5; i++) {
			sb[i] = new Subject(course[i], score[i]);
		}
		
		while(true) {
			System.out.print("과목이름 >> ");
			subject = sc.nextLine();
			if(subject.equals("그만")) break;
			
			for(int i=0; i<5; i++) {
				sb[i].find(subject, i);
			}
			
		}
		
	}
}

public class Subject {
	String course;
	int score;
	
	Subject(String course, int score){
		this.course = course;
		this.score = score;
	}
	
	String getCourse() {
		return course;
	}
	
	void find(String subject, int i) {
		if(course.equals(subject)) {
			System.out.println("Java의 점수는 " + score);
		}
		else if(i==4) System.out.println("없는 과목 입니다.");
		
	}
	
}



6. 다음은 2차원 상의 한 점을 표현하는 Point 클래스이다. 
Point를 상속받아 색을 가진 점을 나타내는 ColorPoint 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.

```java
class Point {
	private int x, y;
	public Point(int x, int y) { this.x = x; this.y = y; }
	public int getX() { return x; }
	public int getY() { return y; }
	protected void move(int x, int y) { this.x =x; this.y = y; }

public static void main(String[] args) {
	ColorPoint cp = new ColorPoint(5, 5, "YELLOW");
	cp.setXY(10, 20);
	cp.setColor("RED");
	String str = cp.toString();
	System.out.println(str+"입니다. ");
}

/*
=======================
RED색의 (10,20)의 점입니다.
*/
```
class ColorPoint extends Point {
	String color;
	
	ColorPoint(int x, int y, String color) {
		super(x, y);
		this.color = color;
	}
	
	public void setColor(String color) {
		this.color = color;
	}
	
	public void setXY(int x, int y) {
		move(x, y);
	}
	
	public String toString() {
		String str;
		
		str = color + "색의" + "(" + super.getX() + "," + super.getY() + ")" + "의 점";
		
		return str;
	}
	
}


7. Point를 상속받아 색을 가진 점을 나타내는 ColorPoint 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.

```java
public static void main(String[] args) {
	ColorPoint zeroPoint = new ColorPoint(); // (0,0) 위치의 BLACK 색 점
	System.out.println(zeroPoint.toString() + "입니다.");
	ColorPoint cp = new ColorPoint(10, 10); // (10,10) 위치의 BLACK 색 점
	cp.setXY(5,5);
	cp.setColor("RED");
	System.out.println(cp.toString()+"입니다.");
}

/*
=======================
BLACK색의 (0,0) 점입니다.
RED색의 (5,5) 점입니다.
*/
```
class ColorPoint extends Point {
	String color;
	
	ColorPoint(){
		super(0, 0);
		this.color = "BLACK";
	}
	
	ColorPoint(int x, int y){
		super(x, y);
	}
	
	void setXY(int x, int y) {
		super.move(x, y);
	}
	
	void setColor(String color) {
		this.color = color;
	}
	
	public String toString() {
		
		return color + "색의" + "(" + super.getX() + "," + super.getY() + ") 점"; 
	}
	
}


8. Point를 상속받아 3차원의 점을 나타내는 Point3D 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.

```java
public static void main(String[] args) {
	Point3D p = new Point3D(1,2,3); // 1,2,3은 각각 x, y, z축의 값.
	System.out.println(p.toString()+"입니다.");
	p.moveUp(); // z 축으로 위쪽 이동
	System.out.println(p.toString()+"입니다.");
	p.moveDown(); // z 축으로 아래쪽 이동
	p.move(10, 10); // x, y 축으로 이동
	System.out.println(p.toString()+"입니다.");
	p.move(100,  200, 300); // x, y, z축으로 이동
	System.out.println(p.toString()+"입니다.");
}

/*
=======================
(1,2,3) 의 점입니다.
(1,2,4) 의 점입니다.
(10,10,3) 의 점입니다.
(100,200,300) 의 점입니다.
*/
```
class Point3D extends Point {
	int z;
	
	Point3D(int x, int y, int z){
		super(x, y);
		this.z = z;
	}
	
	void moveUp() {
		this.z += 1;
	}
	
	void moveDown() {
		this.z -= 1;
	}
	
	void move(int x, int y, int z) {
		super.move(x, y);
		this.z = z;
	}
	
	public String toString() {
		
		return "(" + super.getX() + "," + super.getY() + "," + z + ")의 점";   
	}
	
}


9. 프로그래밍 Point series_03

Point를 상속받아 3차원의 점을 나타내는 Point3D 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.

```java
public static void main(String[] args) {
	Point3D p = new Point3D(1,2,3); // 1,2,3은 각각 x, y, z축의 값.
	System.out.println(p.toString()+"입니다.");
	p.moveUp(); // z 축으로 위쪽 이동
	System.out.println(p.toString()+"입니다.");
	p.moveDown(); // z 축으로 아래쪽 이동
	p.move(10, 10); // x, y 축으로 이동
	System.out.println(p.toString()+"입니다.");
	p.move(100,  200, 300); // x, y, z축으로 이동
	System.out.println(p.toString()+"입니다.");
}

/*
=======================
(1,2,3) 의 점입니다.
(1,2,4) 의 점입니다.
(10,10,3) 의 점입니다.
(100,200,300) 의 점입니다.
*/
```

10.다음 TV 클래스가 있다.

class TV{
   private int size;
   public TV(int size) { this.size = size; }
   protected int getSize() { return size; }
}

[1번] 다음 main() 메소드와 실행 결과를 참고하여 TV를 상속받은 ColorTV 클래스를 작성하라.

public static void main(String[] args) {
   ColorTV myTV = new ColorTV(32, 1024);
   myTV.printProperty();
}
/*
===========
32인치 1024컬러
*/

class ColorTV extends TV{
	int color;
	
	ColorTV(int size, int color){
		super(size);
		this.color = color;
	}
	
	void printProperty() {
		System.out.println(super.getSize() + "인치 " + color + "컬러");
	}
	
}


11. 다음 main() 메소드와 실행 결과를 참고하여 ColorTV를 상속받는 IPTV 클래스를 작성하라.

public static void main(String[] args) {
   IPTV iptv = new IPTV("192.1.1.2", 32, 2048); //"192.1.1.2" 주소에 32인치, 2048컬러
   iptv.printProperty();
}
/*
=============================================
나의 IPTV는 192.1.1.2 주소의 32인치 2048컬러
*/

class IPTV extends ColorTV{
	String address;
	
	IPTV(String address, int size, int color){
		super(size, color);
		this.address = address;
	}
	
	public void printProperty() {
		System.out.println("나의 IPTV는 " + this.address + " 주소의 " + 
	                   super.getSize() + "인치 " + super.getColor() + "컬러"); 
	}
	
}





