1. is a 관계와 has a 관계에 대하여 설명하시오.

is a : 부모 클래스로 데이터형을 선언하고 자식클래스를 생성해서 할당 하는 것. 부모클래스 객체명 = new 자식클래스();
       부모클래스의 변수와 메소드만 호출 할 수 있다.
       원칙적으로 자식클래스의 변수와 메소드는 호출 할 수 없다.
       자식클래스에 부모클래스에게서 Override한 메소드가 있다면 그 메소드는 호출이 가능하다.

has a : 다른 객체를 받아들여서 그 객체의 기능을 사용하는 것이다. ( 사람이 핸드폰을 사서 그 핸드폰의 기능을 사용하는 것)
         받아들인 객체의 자원(메소드/변수)을 사용할 수 있다.
         어떤 클래스 A가 또 다른 클래스인 B가 가진 기능을 사용하고 싶을때 B클래스를 포함하면
         B클래스의 기능을 사용할 수 있다.   


2. 다형성(polymorphism)이란 무엇인가?
-> 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미 한다.
    자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 
    참조할 수 있도록 하여 구현하고 있다.
    
class Parent{...}

class Child extends Parent{...}

Parent pa = new Parnent(); // 허용
Child ch = new Child(); // 허용
Parent pc = new Child(); // 허용 
Child cp = new Parent(); // 오류 발생


3. 아래가 되지 않는 이유에 대하여 메모리 그림으로 설명하시오.
//소스코드는 오늘 소스 코드 내용을 참조해 주세요.
//MobilePhone(부모) SmartPhone(자식)
SmartPhone ph2 = new MobilePhone();  // 불가능

-> ph2는 데이터 타입이 SmartPhone이다. -> 부모 클래스와, 자신의 클래스의 데이터, 함수 모두 참조가 가능하다.
    그런데 new MobilePhone();으로 MobilePhone클래스를 데이터에 올리면 부모 클래스인 MobilePhone의
    변수와 함수만 메모리에 올라간다. (자식 클래스는 메모리에 올라가지 않음)
    부모만 메모리에 올라가 있고 참조 해야할 자신은 메모리에 올라가 있지 않기 때문에 당연히 참조가 되지 않아
    불가능하게 된다.

MobilePhone ph1 = new SmartPhone();  // 가능

-> ph1은 데이터 타입이 MobilePhone이다. -> 부모 클래스의 데이터와 함수만 참조가 가능하다.
    그런데 new SmartPhone으로 SmartPhone 클래스를 데이터에 올리는 경우 SmartPhone 클래스는
    MobilePhone클래스를 상속하고 있기 때문에 부모의 변수, 함수를 먼저 메모리에 올리고, 자신의 변수와
    함수를 메모리에 올린다. -> 부모, 자식의 모든 변수, 함수가 데이터에 올라가 있다.
    부모가 메모리에 올라가 있기 때문에 ph1은 당연히 참조가 가능하다.


4.오버로딩 vs 오버라이딩 에 대하여 설명하시오.

오버로딩 : 같은 이름의 메소드를 여러개 가지면서 매개변수의 유형과 개수가 다르도록 하는 기술. ex) println
오버라이딩 : 상위 클래스가 가지고 있는 메소드를 하위 클래스가 재정의해서 사용.


5. 다음을 만족하는 클래스 Employee를 작성하시오. Series _01 (필수)

      (8번 문제는 이것과 관련된 문제입니다.)

- 클래스 Employee(직원)은 클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스
- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의
- 메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력

public class Employee {
	private String name, address, dept;
	private int year, salary;
	
	public Employee(String name, int year, String address, String dept, int salary){
		this.name = name;
		this.year = year;
		this.address = address;
		this.dept = dept;
	}
	
	public  void printInfo() {
		System.out.println("이름: " + this.name);
		System.out.println("나이: " + this.year);
		System.out.println("주소: " + this.address);
		System.out.println("부소: " + this.dept);
	}
	
}



6 다음을 만족하는 클래스 Regular를 작성하시오. Series_02 (필수)

- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출
- Setter : 월급 정보 필드를 지정
- 메소드 printInfo() : 인자는 없고 "정규직"이라는 정보와 월급을 출력

class Regular extends Employee{
	int salary;
	
	Regular(String name, int year, String address, String dept){
		super(name, year, address, dept);
	}
	
	public void setter(int salary) {
		this.salary = salary;
	}
	
	public  void printInfo() {
		System.out.println("정규직");
		super.printInfo();
		System.out.println("월급: " + this.salary);
	}
	
}



7. 프로그래밍 (자바의 정석: 연습 문제 56page)    











